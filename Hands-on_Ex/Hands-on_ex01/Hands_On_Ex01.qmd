---
title: "ISSS626 Hands On Exercise 1"
---

# Geospatial Data Science with R

## 1.1 Learning Outcome

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

By the end of this hands-on exercise, you should acquire the following competencies:

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,

-   importing geospatial data by using appropriate functions of **sf** package,

-   importing aspatial data by using appropriate function of **readr** package,

-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,

-   assigning or transforming coordinate systems by using using appropriate *sf* functions,

-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,

-   performing geoprocessing tasks by using appropriate functions of **sf** package,

-   performing data wrangling tasks by using appropriate functions of **dplyr** package and

-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

## 1.2 Data Acquisition

Data are key to data analytics including geospatial analytics. Hence, before analysing, we need to assemble the necessary data. In this hands-on exercise, you are required to extract the necessary data sets from the following sources:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)

-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)

-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

Load packages:

```{r}
library(pacman) 
p_load(sf, tidyverse) 
```

Reading data:

```{r}
mpsz = st_read(dsn = "data/geospatial", 
                  layer = "MP14_SUBZONE_WEB_PL")

cyclingpath = st_read(dsn = "data/geospatial", layer = "CyclingPathGazette")

preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

## 1.3 Checking content

### 1.3.1 Working with st_geometry()

The column in the sf data.frame that contains the geometries is a list of class `sfc`. We can retrieve the geometry list-column in this case by mpsz\$geom or mpsz\[\[1\]\], but the more general way uses [`st_geometry()`](https://r-spatial.github.io/sf/reference/st_geometry.html) as shown in the code chunk below.

```{r}
st_geometry(mpsz)
```

### 1.3.2 Working with glimpse()

```{r}
glimpse(mpsz)
```

### 1.3.3 Working with head()

```{r}
head(mpsz, n=5)  
```

## 1.4 Plotting Geospatial Data

```{r}
plot(mpsz) 
```

```{r}
plot(st_geometry(mpsz))
```

```{r}
plot(mpsz["PLN_AREA_N"])
```

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), 
     add = TRUE)
```

## 1.5 Working with Projection

### 1.5.1 Assigning EPSG code to a simple feature dataframe

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21 but when we read until the end of the print, it indicates that the EPSG is 9001. This is a wrong EPSG code because the correct EPSG code for svy21 should be [3414](https://epsg.io/3414).

In order to assign the correct EPSG code to `mpsz` data frame, *st_set_crs()* of **sf** package is used as shown in the code chunk below.

```{r}
mpsz <- st_set_crs(mpsz, 3414) 
```

Checking CSR again

```{r}
st_crs(mpsz)
```

### 1.5.2 **Transforming the projection of preschool from wgs84 to svy21.**

In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

Let us take preschool simple feature data frame as an example. The print below reveals that it is in wgs84 coordinate system.

Geometry set for 2290 features Geometry type: POINT Dimension: XYZ Bounding box: xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134 z_range: zmin: 0 zmax: 0 Geodetic CRS: WGS 84 First 5 geometries:

This is a scenario that *st_set_crs()* is not appropriate and *st_transform()* of sf package should be used. This is because we need to reproject `preschool` from one coordinate system to another coordinate system mathemetically.

Let us perform the projection transformation by using the code chunk below.

```{r}
preschool <- st_transform(preschool, 
                              crs = 3414)
```

Checking crs of preschool again:

```{r}
st_crs(preschool)
```

Now, let us try to plot the preschool layer ontop of mpsz layer again by using the similar code chunk you used earlier.

```{r}
plot(st_geometry(mpsz))
plot(st_geometry(preschool), add = TRUE)
```

## 1.6 Import and Converting Aspatial Data

### 1.6.1 Importing aspatial data

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

After importing the data file into R, it is important for us to examine if the data file has been imported correctly.

The code chunk below shows *list()* of Base R instead of *glimpse()* is used to do the job.

```{r}
list(listings)
```

### 1.6.2 **Creating a simple feature data frame from an aspatial data frame**

The code chunk below converts `listing` data frame into a simple feature data frame by using [*st_as_sf()*](https://r-spatial.github.io/sf/reference/st_as_sf.html)of **sf** packages

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

Things to learn from the arguments above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to [epsg.io](https://epsg.io/).

-   *%\>%* is used to nest *st_transform()* to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let us examine the content of this newly created simple feature data frame.

```{r}
glimpse(listings_sf)
```

## 1.7 Geoprocessing with sf package

### 1.71 Use case 1: Land acquisition analysis

#### The Scenario

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the existing cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

**The Solution**

Firstly, [`st_buffer()`](https://r-spatial.github.io/sf/reference/geos_unary.html) of **sf** package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(
  cyclingpath, dist=5, nQuadSegs = 30)
```

This is followed by calculating the area of the buffers as shown in the code chunk below.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
buffer_cycling <- buffer_cycling %>%
  mutate(AREA = st_area(geometry))
```

Lastly, `sum()` of Base R will be used to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

We can also create a plot showing the buffer by a selected planning subzone.

Assuming that we are interested on the land acquisition in Tampines West planning subzone.

Firstly, `filter()` of dplyr package will be used to extract polygon feature of Tampines West by using the code chunk below.

```{r}
mpsz_selected <- mpsz %>%
  filter(SUBZONE_N == "TAMPINES WEST") 
```

Next, `st_intersection()` of **sf** package will be used to clip cycling buffers within Tampines West planning subzone.

```{r}
#buffer_cycling_selected <- st_intersection(
#  buffer_cycling, mpsz_selected)
```

### 1.7.3 **Use case 2: To determine the number of pre-schools by planning subzone**

#### The Scenario

The authority requires a count of pre-schools for each planning subzone to support forward planning. Using R and the sf package, perform the necessary geoprocessing to compute these counts and present the results clearly.

**The Solution**

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using [`st_intersects()`](https://r-spatial.github.io/sf/reference/geos_binary_pred.html). Next, [`length()`](https://www.rdocumentation.org/packages/base/versions/3.6.2/topics/length) of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz$`PreSch Count`<- lengths(st_intersects(mpsz, preschool))
```

You can check the summary statistics of the newly derived *PreSch Count* field by using *summary()* as shown in the code chunk below.

```{r}
summary(mpsz$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the [*top_n()*](https://dplyr.tidyverse.org/reference/top_n.html) of **dplyr** package is used as shown in the code chunk below.

```{r}
top_n(mpsz, 1, `PreSch Count`)
```

In the code chunk below, another geoprocessing function of sf package called [`st_area()`](https://r-spatial.github.io/sf/reference/geos_measures.html) is used to derive the area of each planning subzone.

```{r}
mpsz$Area <- mpsz %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz <- mpsz %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

In this section, you will visualise the derive variables by using appropriate Exploratory data Analysis methods of [ggplot2](https://ggplot2.tidyverse.org/).

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, *hist()* of R Graphics will be used as shown in the code chunk below.

```{r}
hist(mpsz$`PreSch Density`)
```

Although the syntax is very easy to use however the output is far from meeting publication quality. Furthermore, the function has limited room for further customisation.

In the code chunk below, appropriate **ggplot2** functions will be used.

```{r}
ggplot(data=mpsz, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning subzones with a single pre-school, on the other hand, \nthere are seven planning subzones with at least 30 or more pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

```{r}
ggplot(data=mpsz, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
